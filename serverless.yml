service: user-aws
frameworkVersion: "3"

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack

package:
  individually: true

provider:
  name: aws
  runtime: nodejs18.x
  lambdaHashingVersion: "20201221"
  region: ap-northeast-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        ["*"]
        # - arn:aws:dynamodb:ap-northeast-1:622029583476:table/UserManageTable

functions:
  addUser:
    handler: route.addUser
    events:
      - http:
          path: /addUser
          method: post
          cors: true
            # origin: "http://localhost:3000" # <-- Specify allowed origin
            # headers: # <-- Specify allowed headers
            #   - Content-Type
            #   - X-Amz-Date
            #   - Authorization
            #   - X-Api-Key
            #   - X-Amz-Security-Token
            #   - X-Amz-User-Agent
            # allowCredentials: true

  login:
    handler: route.login
    events:
      - http:
          path: /login
          method: post
          cors: true

  sendEmail:
    handler: route.sendEmail
    events:
      - http:
          path: /resetPassword
          method: post
          cors: true

  getAllUser:
    handler: route.getAll
    events:
      - http:
          path: /getAll
          method: get
          cors: true

  getById:
    handler: route.getById
    events:
      - http:
          path: /getById/{id}
          method: get
          cors: true

  UpdateById:
    handler: route.updateUser
    events:
      - http:
          path: /updateById/{id}
          method: put
          cors: true

  UpdatePassword:
    handler: route.updatePassword
    events:
      - http:
          path: /updatePassword
          method: put
          cors: true

  deleteById:
    handler: route.deleteUser
    events:
      - http:
          path: /deleteById/{id}
          method: delete
          cors: true

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TableName: UserManageTable
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # GatewayResponseDefault4XX:
    #   Type: "AWS::ApiGateway::GatewayResponse"
    #   Properties:
    #     ResponseParameters:
    #       gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    #       gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
    #     ResponseType: DEFAULT_4XX
    #     RestApiId:
    #       Ref: "ApiGatewayRestApi"
